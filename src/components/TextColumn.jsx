import React from 'react'
import styled, { useTheme } from 'styled-components'
import debounce from 'lodash.debounce'
import TextContainer from './TextContainer'
import { getOffset, fadeIn, RATIO } from '../utils'

const MEASURE = '40rem'

const InlineFootnotes = styled.div`
  @media (min-width: ${960 / 16}em) {
    display: none;
  }
`

const ColumnFootnotesContainer = styled.ol`
  display: none;
  position: relative;
  padding-right: ${({theme}) => theme.sizes.s2};

  ${fadeIn}

  @media (min-width: ${960 / 16}em) {
    display: inline;
    & hr {
      display: none;
    }
  }

  /* We don't need backrefs when next to text */
  & .footnote-backref {
    display: none;
  }

  & ol,
  & li {
    font-family: ${({ theme }) => theme.fonts.sans};
    font-size: ${({ theme }) => theme.fontSizes['s-1']};
  }
`

/**
 * Converts a footnote id to a reference id
 *
 * @example convertId('fn-1') // 'fnref-1'
 */
const convertId = (id) => `fnref-${id.split('-')[1]}`

const ColumnFootnote = ({ children, footnoteId }) => {
  const theme = useTheme()

  const getTop = React.useCallback(() => {
    const headerHeight = theme.sizes.s5
    const el = document.querySelector(`#${convertId(footnoteId)}`)
    return (el ? getOffset(el).top : 0) - (parseInt(headerHeight) * 16)
  }, [footnoteId, theme])

  const [top, setTop] = React.useState(0)

  React.useLayoutEffect(() => {
    setTimeout(() => {
      setTop(getTop())
    }, 100)

    const handler = debounce((_) => setTop(getTop()), 100)

    window.addEventListener('resize', handler)

    return () => window.removeEventListener('resize', handler)
  }, [getTop])

  return React.cloneElement(children, {
    style: {
      top: `${top}px`,
      position: `relative`,
      marginLeft: theme.sizes.s0,
      maxWidth: theme.sizes.s6,
    }
  })
}

const ColumnFootnotes = ({ children }) => {
  const [
    _hr, // discard hr element
    olEl,
  ] = children.props.children

  return (
    <ColumnFootnotesContainer>
      {olEl.props.children.map((liEl) => (
        <ColumnFootnote
          key={liEl.props.id}
          footnoteId={liEl.props.id}
        >
          {liEl}
        </ColumnFootnote>
      ))}
    </ColumnFootnotesContainer>
  )
}

const TextColumn = ({ children, footnotes }) => (
  <div
    css={`
      display: grid;
      position: relative;
      padding: ${({ theme }) => theme.sizes.s2} 0;

      grid-template-columns: ${({ theme }) =>
        `${theme.sizes.s2} 1fr ${theme.sizes.s2}`};

      @media (min-width: ${780 / 16}em) {
        grid-template-columns: ${({ theme }) =>
          `minMax(${theme.sizes.s2} 1fr) ${MEASURE} minMax(${theme.sizes.s2}, 1fr)`};
      }

      @media (min-width: ${960 / 16}em) {
        grid-template-columns: ${({ theme }) =>
          `1fr ${MEASURE} 2fr`};
      }

      // The CSS classes selected below are auto-generated by Gatsby,
      // hence a lack of more specific styling via styled-components

      // Stop code blocks, images and footnotes from overflowing
      .gatsby-highlight,
      .gatsby-resp-image-link,
      .no-overflow,
      .footnotes {
        overflow: scroll;
        // Set max-width to viewport width, minus the width of the TextColumn
        // spacer divs specified above in grid-template-columns
        max-width: calc(
          100vw -
            ${({ theme }) => `${theme.sizes.s2} - ${theme.sizes.s2}`}
        );
      }
    `}
  >
    <div />
    <TextContainer>
      {children}
      {footnotes && <InlineFootnotes>{footnotes}</InlineFootnotes>}
    </TextContainer>
    {footnotes ? (
      <ColumnFootnotes>{footnotes}</ColumnFootnotes>
    ) : (
      <div/>
    )}
  </div>
)

export default TextColumn
